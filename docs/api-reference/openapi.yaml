openapi: 3.0.0
info:
  title: Volant REST API
  version: 1.0.0
  description: >-
    REST interface for the Volant microVM orchestration engine.
    All endpoints default to `http://127.0.0.1:7777`.
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
servers:
  - url: http://127.0.0.1:7777
paths:
  /healthz:
    get:
      summary: Health check
      description: Returns the health status of the service. Used for simple uptime checks.
      operationId: getHealth
      tags: [health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/v1/system/status:
    get:
      summary: System status summary
      description: Provides a summary of the host system's status, including the current number of running VMs and resource utilization.
      operationId: getSystemStatus
      tags: [status]
      responses:
        '200':
          description: Current VM count and resource usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms:
    get:
      summary: List VMs
      description: Retrieves a list of all virtual machines managed by the platform.
      operationId: listVMs
      tags: [vm]
      responses:
        '200':
          description: Array of VM metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VM'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Create VM
      description: Creates and starts a new virtual machine based on the provided configuration.
      operationId: createVM
      tags: [vm]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVMRequest'
      responses:
        '201':
          description: VM created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VM'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms/{name}:
    parameters:
      - $ref: '#/components/parameters/VMName'
    get:
      summary: Fetch VM by name
      description: Retrieves the metadata and status for a specific virtual machine identified by its name.
      operationId: getVMByName
      tags: [vm]
      responses:
        '200':
          description: VM metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VM'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Destroy VM
      description: Stops and permanently deletes a virtual machine identified by its name.
      operationId: destroyVM
      tags: [vm]
      responses:
        '204':
          description: Deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/vms/{name}/agent/{agentPath}:
    parameters:
      - $ref: '#/components/parameters/VMName'
      - name: agentPath
        in: path
        required: true
        description: Agent-relative path (proxied)
        schema:
          type: string
        example: "exec"
    post:
      summary: Proxy requests to volary
      description: Forwards a request to the agent running inside the specified VM.
      operationId: proxyAgentRequest
      tags: [agent]
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Agent response
          content:
            application/json:
              schema:
                type: object
        '502':
          $ref: '#/components/responses/BadGateway'
  /api/v1/vms/{name}/actions/{plugin}/{action}:
    parameters:
      - $ref: '#/components/parameters/VMName'
      - $ref: '#/components/parameters/PluginName'
      - $ref: '#/components/parameters/ActionName'
    post:
      summary: Legacy plugin action proxy (VM scoped)
      description: Resolves a plugin manifest and forwards the action payload to the runtime agent inside the VM. New plugins prefer calling workload endpoints directly.
      operationId: invokePluginActionScoped
      tags: [plugins]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginActionPayload'
      responses:
        '200':
          description: Plugin action response
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/events/vms:
    get:
      summary: Stream VM lifecycle events (SSE)
      description: Establishes a Server-Sent Events (SSE) connection to stream real-time lifecycle events for all VMs.
      operationId: streamVMEvents
      tags: [events]
      responses:
        '200':
          description: Server-Sent Events stream of VM events
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/VMEvent'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/plugins:
    get:
      summary: List plugin manifests
      description: Returns the identifiers of all plugin manifests currently registered with the engine.
      operationId: listPlugins
      tags: [plugins]
      responses:
        '200':
          description: Plugin identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginListResponse'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Install plugin manifest
      description: Installs or updates a plugin manifest. The manifest is persisted and loaded on subsequent daemon starts.
      operationId: installPlugin
      tags: [plugins]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginManifest'
      responses:
        '201':
          description: Manifest installed
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/plugins/{plugin}:
    parameters:
      - $ref: '#/components/parameters/PluginName'
    get:
      summary: Fetch plugin manifest
      description: Retrieves the manifest metadata for the specified plugin.
      operationId: getPlugin
      tags: [plugins]
      responses:
        '200':
          description: Plugin manifest metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginManifest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Remove plugin manifest
      description: Removes the manifest from persistent storage and the in-memory registry.
      operationId: deletePlugin
      tags: [plugins]
      responses:
        '204':
          description: Manifest removed
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/plugins/{plugin}/enabled:
    parameters:
      - $ref: '#/components/parameters/PluginName'
    post:
      summary: Enable or disable plugin manifest
      description: Toggles whether the plugin manifest is active for routing requests.
      operationId: setPluginEnabled
      tags: [plugins]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginEnableRequest'
      responses:
        '200':
          description: Updated enablement state
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/plugins/{plugin}/actions/{action}:
    parameters:
      - $ref: '#/components/parameters/PluginName'
      - $ref: '#/components/parameters/ActionName'
    post:
      summary: Legacy plugin action proxy (unscoped)
      description: Resolves the specified plugin manifest and proxies the payload to the runtime. Useful for older manifests; new plugins should call workload endpoints directly.
      operationId: invokePluginAction
      tags: [plugins]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginActionPayload'
      responses:
        '200':
          description: Plugin action response
          content:
            application/json:
              schema:
                type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/mcp:
    post:
      summary: Model Context Protocol endpoint
      description: Endpoint for the Model Context Protocol (MCP) to send commands and receive responses.
      operationId: postMCPCommand
      tags: [mcp]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPRequest'
      responses:
        '200':
          description: MCP command response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  parameters:
    VMName:
      name: name
      in: path
      required: true
      description: VM name
      schema:
        type: string
    PluginName:
      name: plugin
      in: path
      required: true
      description: Plugin identifier
      schema:
        type: string
    ActionName:
      name: action
      in: path
      required: true
      description: Action identifier exposed by the plugin manifest
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGateway:
      description: Downstream error contacting agent runtime
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    SystemStatus:
      type: object
      properties:
        vm_count:
          type: integer
          example: 4
        cpu_percent:
          type: number
          format: float
          example: 37.42
        mem_percent:
          type: number
          format: float
          example: 62.17
    VM:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
        runtime:
          type: string
          description: Runtime identifier selected for the VM
        pid:
          type: integer
          nullable: true
        ip_address:
          type: string
        mac_address:
          type: string
        cpu_cores:
          type: integer
        memory_mb:
          type: integer
        kernel_cmdline:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    CreateVMRequest:
      type: object
      required: [name, cpu_cores, memory_mb]
      properties:
        name:
          type: string
        runtime:
          type: string
          description: Optional runtime/plugin identifier. Defaults to the plugin name when omitted.
        cpu_cores:
          type: integer
          minimum: 1
        memory_mb:
          type: integer
          minimum: 64
        kernel_cmdline:
          type: string
          nullable: true
    VMEvent:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        status:
          type: string
        ip_address:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    MCPRequest:
      type: object
      properties:
        command:
          type: string
        params:
          type: object
          additionalProperties: true
    MCPResponse:
      type: object
      properties:
        result:
          type: object
          additionalProperties: true
        error:
          type: string
          nullable: true
    PluginListResponse:
      type: object
      properties:
        plugins:
          type: array
          items:
            type: string
    PluginManifest:
      type: object
      required: [name, version]
      properties:
        name:
          type: string
        version:
          type: string
        runtime:
          type: string
          description: Optional runtime identifier; defaults to the plugin name when omitted.
        enabled:
          type: boolean
          default: true
        image:
          type: string
          nullable: true
        resources:
          type: object
          nullable: true
          properties:
            cpu_cores:
              type: integer
            memory_mb:
              type: integer
        actions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PluginAction'
        openapi:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
          nullable: true
    PluginAction:
      type: object
      properties:
        description:
          type: string
        method:
          type: string
        path:
          type: string
        timeout_ms:
          type: integer
    PluginEnableRequest:
      type: object
      required: [enabled]
      properties:
        enabled:
          type: boolean
    PluginActionPayload:
      type: object
      description: Arbitrary request body forwarded to the plugin runtime. Structure depends on the plugin-specific contract.
      additionalProperties: true
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: object
          additionalProperties: true
        
